====================
Gazebo-ROS Simulator
====================

Requirements
------------

Cymulator depends on the following three major frameworks:

+ Python 3.5 or later
+ ROS Kinetic
+ Gazebo 9 or later

Detail instructions for compilation and installation can be found in TODO


Quick Start
-----------

TODO


Installation
------------

  To install ROS Kinetic, Gazebo Simulator, and other dependent packages, please run the following script:

    .. code-block:: shell

      cd ~/CyPyHous3/src/Simulator
      ./install.sh

    Then, open a new terminal:

    .. code-block:: shell

      cd ~/catkin_ws3
      catkin_make

  Software and packages installed:

  * ROS Kinetic
  * Gazebo 10.0.0
  * catkin_pkg
  * empy
  * numpy
  * pathlib
  * python3-catkin-pkg-modules
  * python3-rospkg-modules
  * python3-yaml
  * ros-kinetic-ackermann-msgs
  * ros-kineitc-geographic-msgs
  * ros-kinetic-ros-control
  * ros-kinetic-ros-controllers

2. Usage
--------

  *One simulator, 4 types of usage*

**Launch Gazebo-ROS Simulator**

  To use the simulator, user may choose to generate multiple drones or f1tenth cars. Also, the user needs to specify the initial locations for models, or the simulator will generate random locations:

  .. code-block:: shell

    python3 sim.py -c NUM_OF_CARS -d NUM_OF_DRONES -I INIT_LOCATIONS

  For example:

  .. code-block:: shell

    python3 sim.py -d 3 -c 2 -I 0,1 0,2 0,3 1,1 1,2

  This will create a total of 5 models with 3 drones and 2 cars. Drones will be generated on location (0,1), (0,2), (0,3); while cars will be generated on (1,1) (1,2)

  After initializing the simulator, user shall open another terminal to run other programs inside the Simulator directory.

**1. Pure Simulation**

  This Gazebo-ROS Simulator supports pure simulation. User may choose to multiple drones and cars at specific goal positions or at random locations

  .. code-block:: shell

    python3 goto.py -c NUM_OF_CARS -d NUM_OF_DRONES -w -G GOAL_LOCATIONS

  Then, the built-in controllers will drive the models towards the goal points.

  NOTE: if -w flag is included, the queued waypoints functionality will be triggered; use may publish next waypoint to ropstopic */drone#/goals*. The message type is: std_msgs/Float32MultiArray

**2. Post-Sim Visualization**

  In this type of usage, the user should have obtained some log files of drones or cars somewhere else, either from real simulation or generated by the software.
  Ths log file needs to be in the following format:

  .. code-block:: shell

    TBD

  To use post simulation:

  .. code-block:: shell

    python3 move.py -c NUM_OF_CARS -d NUM_OF_DRONES -r -L LOGFILE

  where LOGFILE is the name of LOGFILE that is used.

  NOTE: if LOGFILE is not specified, the program will reset models' default locations; if *-r* is included, this method will place models on random locations



**3. Real-time Simulation**

  TBD

**4. Real-time Visualization**

  TBD
